/* jshint ignore:start */
const compile = (content, $ = '$') => Function($, 'return `' + content + '`;');
/* jshint ignore:end */

module.exports = (path, options, render = (err, content) => err || content) => {
  if(options === undefined || typeof options === 'string') {
    return compile(path, options);
  }
  const {locals = {}, settings, template} = options;
  const assign = (err, content) => {
    if(err) {
      return render(new Error(err), '');
    }
    const localsKeys = Object.keys(locals);
    const localsValues = localsKeys.map(i => locals[i]);
    const compilePartials = values => {
      const valTempList = localsValues.concat(values);
      localsValues.push(...values.map(i => compile(i, localsKeys)(...valTempList)));
      return render(null, compile(content, localsKeys)(...localsValues));
    };
    return render(null, compile(content, localsKeys)(...localsValues));
  };
  if (template) {
    return assign(null, path);
  }
};
