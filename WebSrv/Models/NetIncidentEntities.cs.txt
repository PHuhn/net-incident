namespace WebSrv.model
{
    using System;
    using System.Text;
    using System.Linq;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Validation;
    //
    using System.Data.EntityClient; // EntityConnection
    using System.Data.Common; // DbConnection for in memory
    //
    public partial class ApplicationDbContext : DbContext
    {
        // this constructor in ApplicationDbContext.Context.cs
        //public ApplicationDbContext()
        //    : base("name=ApplicationDbContext")
        //{
        //}
        public ApplicationDbContext(EntityConnection connection)
            : base(connection, true)
        {
        }
        public ApplicationDbContext(DbConnection connection)
            : base(connection, true)
        {
        }
        //
        // ---------------------------------------------------------------------------
        //Insert duplicate validation.
        //
        protected override DbEntityValidationResult ValidateEntity(
                DbEntityEntry entityEntry, IDictionary<object, object> items)
        {
            if (entityEntry.Entity is User && entityEntry.State == EntityState.Added)
            {
                if (Users.Any(a => a.UserAccount == ((User)entityEntry.Entity).UserAccount))
                {
                    // return validation error
                    return new DbEntityValidationResult(entityEntry, new List<DbValidationError>()
						{ new DbValidationError("User", "Duplicate User: '" +
						((User)entityEntry.Entity).UserAccount + "'") });
                }
            }
            if (entityEntry.Entity is Company && entityEntry.State == EntityState.Added)
            {
                if (Companies.Any(a => a.CompanyName == ((Company)entityEntry.Entity).CompanyName))
                {
                    // return validation error
                    return new DbEntityValidationResult(entityEntry, new List<DbValidationError>()
						{ new DbValidationError("Company", "Duplicate Company: '" +
						((Company)entityEntry.Entity).CompanyName + "'") });
                }
            }
            //
            if (entityEntry.Entity is IncidentType && entityEntry.State == EntityState.Added)
            {
                if (IncidentTypes.Any(a => a.IncidentTypeShortDesc == ((IncidentType)entityEntry.Entity).IncidentTypeShortDesc))
                {
                    // return validation error
                    return new DbEntityValidationResult(entityEntry, new List<DbValidationError>()
						{ new DbValidationError("IncidentType", "Duplicate IncidentType: '" +
						((IncidentType)entityEntry.Entity).IncidentTypeShortDesc + "'") });
                }
            }
            //
            if (entityEntry.Entity is NIC && entityEntry.State == EntityState.Added)
            {
                if (NICs.Any(a => a.NIC_Id == ((NIC)entityEntry.Entity).NIC_Id))
                {
                    // return validation error
                    return new DbEntityValidationResult(entityEntry, new List<DbValidationError>()
						{ new DbValidationError("NIC", "Duplicate NIC: '" +
						((NIC)entityEntry.Entity).NIC_Id + "'") });
                }
            }
            if (entityEntry.Entity is NoteType && entityEntry.State == EntityState.Added)
            {
                if (NoteTypes.Any(a => a.NoteTypeDesc == ((NoteType)entityEntry.Entity).NoteTypeDesc))
                {
                    // return validation error
                    return new DbEntityValidationResult(entityEntry, new List<DbValidationError>()
						{ new DbValidationError("NoteType", "Duplicate NoteType: '" +
						((NoteType)entityEntry.Entity).NoteTypeDesc + "'") });
                }
            }
            //
            return base.ValidateEntity(entityEntry, items);
        }
        //
    }
}
