using System;
using System.Collections.Generic;
using System.Security.Claims;
using System.Threading.Tasks;
//
namespace NSG.Identity.Providers
{
    public class SimpleAuthorizationServerProvider
    {
        public override async Task ValidateClientAuthentication(OAuthValidateClientAuthenticationContext context)
        {
            context.Validated();
        }
        //
        public override async Task GrantResourceOwnerCredentials(OAuthGrantResourceOwnerCredentialsContext context)
        {
            context.OwinContext.Response.Headers.Add("Access-Control-Allow-Origin", new[] { "*" });
            //
            var userManager = context.OwinContext.GetUserManager<ApplicationUserManager>();
            //
            ApplicationUser user = await userManager.FindAsync(context.UserName, context.Password);
            //
            if (user == null)
            {
                context.SetError("invalid_grant", "The user name or password is incorrect.");
                return;
            }

            var identity = new ClaimsIdentity(context.Options.AuthenticationType);
            identity.AddClaim(new Claim("sub", context.UserName));
            identity.AddClaim(new Claim("role", "user"));

            context.Validated(identity);
        }
    }
}
//
